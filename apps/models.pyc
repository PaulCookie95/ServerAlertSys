from datetime import datetime
from apps import db
from werkzeug.security import generate_password_hash, check_password_hash


# 基类：添加时间
class BaseModel(object):
    """模型基类，为每个模型补充创建时间与更新时间"""

    create_time = db.Column(db.DateTime, default=datetime.now)  # 记录的创建时间
    update_time = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)  # 记录的更新时间(登录时间)


# 用户类
class User(BaseModel, db.Model):
    """用户"""

    __tablename__ = "user_profile"

    id = db.Column(db.Integer, primary_key=True)  # 用户编号
    name = db.Column(db.String(32), unique=True, nullable=False)  # 用户暱称
    authority = db.Column(db.String(2), unique=False, default=0)  # 用户权限0<1<2
    password_hash = db.Column(db.String(128), nullable=False)  # 加密的密码
    # create_time
    # update_time

    operation_log = db.relationship('OperationLog', backref='user', lazy='dynamic')  # 对应用户的操作日志
    server_info = db.relationship('ServerInfo', backref='user', lazy='dynamic')  # 对应用户管理的服务器
    server_threshold = db.relationship('ServerThreshold', backref='user', lazy='dynamic')  # 对应用户管理的服务器

    # 希望再提供一个password属性, 能够直接进行密码的设置
    # @property: 将下面的函数提升为属性(getter)
    @property
    def password(self):
        raise AttributeError('不允许访问密码')

    @password.setter
    def password(self, value):
        # 在属性的setter方法中进行密码加密处理
        self.password_hash = generate_password_hash(value)

    def __init__(self, create_time=None, update_time=None, name=None, password_hash=None, authority=None):
        self.name = name
        self.password_hash = password_hash
        self.authority = authority
        self.create_time = create_time
        self.update_time = update_time

    # 检查密码是否一致
    def check_password(self, value):
        """检查用户密码，value是用户填写密码"""
        return check_password_hash(self.password_hash, value)

    def to_dict(self):
        """将对象转换为字典数据"""
        user_dict = {
            "user_id": self.id,
            "name": self.name,
            "authority": self.authority,
            "create_time": self.create_time.strftime("%Y-%m-%d %H:%M:%S")
        }
        return user_dict

    def auth_to_dict(self):
        """将实名信息转换为字典数据"""
        auth_dict = {
            "user_id": self.id,
            "user_name": self.name
        }
        return auth_dict

    def __repr__(self):
        str_ = '用户名 name:{name}'.format(name=self.name)
        return str_


# 操作日志类
class OperationLog(BaseModel, db.Model):
    """操作日志"""

    __tablename__ = "operation_log"

    id = db.Column(db.Integer, primary_key=True)  # 操作编号
    module = db.Column(db.String(8))  # 操作模块
    operation = db.Column(db.String(128))  # 执行的操作
    operation_res = db.Column(db.String(32))  # 操作结果
    # create_time 已继承
    update_time = None  # 取消update字段

    user_id = db.Column(db.Integer, db.ForeignKey('user_profile.id'))  # 外键关联user

    def __init__(self, create_time=None, module=None, operation=None, operation_res=None):
        # self.id = id
        self.module = module
        self.operation = operation
        self.operation_res = operation_res
        self.create_time = create_time

    def to_dict(self):
        """将对象转换为字典数据"""
        # 根据前端的需求, 返回对应字段的信息
        operation_dict = {
            "id": self.id,
            "user_id": self.user_id,
            "module": self.module,
            "operation": self.operation,
            "operation_res": self.operation_res,
            "create_time": self.create_time.strftime("%Y-%m-%d %H:%M:%S")
        }
        return operation_dict

    def __repr__(self):
        str_ = """
        OperationLog类
        operation_log
        包含字段：
        id(pk)
        user_id(fk)
        module 
        operation 
        operation_res
        create_time
        """
        return str_


# 告警日志类
class AlertLog(BaseModel, db.Model):
    """告警日志"""

    __tablename__ = "alert_log"

    id = db.Column(db.Integer, primary_key=True)  # 操作编号
    threshold = db.Column(db.String(8))  # 设定阈值
    recording = db.Column(db.String(8))  # 记录值
    type = db.Column(db.String(16))  # 告警类型
    desc = db.Column(db.String(32))  # 描述(执行操作)
    # create_time 已继承
    update_time = None  # 取消update字段

    server_id = db.Column(db.Integer, db.ForeignKey('server_info.id'))

    def __init__(self, create_time=None, threshold=None, recording=None, type=None, desc=None):
        self.threshold = threshold
        self.recording = recording
        self.type = type
        self.desc = desc
        self.create_time = create_time

    def to_dict(self):
        """将对象转换为字典数据"""
        alert_dict = {
            "id": self.id,
            "server_id": self.server_id,
            "threshold": self.threshold,
            "recording": self.recording,
            "type": self.type,
            "desc": self.desc,
            "create_time": self.create_time.strftime("%Y-%m-%d %H:%M:%S")
        }
        return alert_dict

    def __repr__(self):
        str_ = """
        AlertLog类
        alert_log
        包含字段：
        id
        server_id
        threshold
        recording 
        server_ip 
        type
        desc
        create_time
        """
        return str_


# 服务器配置类
class ServerInfo(BaseModel, db.Model):
    """服务器信息"""
    # - 服务器名称
    # - ip
    # - 端口
    # - 操作系统
    # - 描述
    # - ssh用户名【界面上不显示】
    # - ssh密码（明文）【界面上显示】

    __tablename__ = "server_info"

    id = db.Column(db.Integer, primary_key=True)  # 服务器编号
    name = db.Column(db.String(32), nullable=False)  # 服务器名称
    server_ip = db.Column(db.String(32))  # 服务器ip
    server_port = db.Column(db.String(6))  # 服务器端口
    server_os = db.Column(db.String(32))  # 操作系统
    server_desc = db.Column(db.String(128))  # 描述
    ssh_name = db.Column(db.String(128))  # ssh用户名
    ssh_password = db.Column(db.String(128))  # ssh密码，明文
    # create_time
    # update_time

    user_id = db.Column(db.Integer, db.ForeignKey('user_profile.id'))
    server_threshold = db.relationship('ServerThreshold', backref='server_info',lazy='dynamic')
    alert_log = db.relationship('AlertLog', backref='server_info', uselist=False, lazy='dynamic')

    def __init__(self, create_time=None, update_time=None, server_ip=None, server_port=None, server_os=None,
                 server_desc=None, ssh_name=None, ssh_password=None):
        self.server_ip = server_ip
        self.server_port = server_port
        self.server_os = server_os
        self.server_desc = server_desc
        self.ssh_name = ssh_name
        self.ssh_password = ssh_password
        self.create_time = create_time
        self.update_time = update_time

    def to_dict(self):
        """将对象转换为字典数据"""
        # 根据前端的需求, 返回对应字段的信息
        server_dict = {
            'id': self.id,
            "name": self.name,
            "server_ip": self.server_ip,
            "server_port": self.server_port,
            "server_os": self.server_os,
            "server_desc": self.server_desc,
            "ssh_name": self.ssh_name,
            "ssh_password": self.ssh_password,
            "create_time": self.create_time.strftime("%Y-%m-%d %H:%M:%S"),
            "update_time": self.update_time
        }
        return server_dict

    def __repr__(self):
        str = """
        ServerInfo类
        Server_Info表
        包含字段：
        id
        name 
        server_ip
        server_port 
        server_os 
        server_desc
        ssh_name
        """
        return str


# 告警阈值设置表
class ServerThreshold(BaseModel, db.Model):
    """告警阈值设置"""

    __tablename__ = "server_threshold"

    id = db.Column(db.Integer, primary_key=True)  # 服务器编号
    server_ram_th = db.Column(db.String(3))  # 内存阈值
    server_cpu_th = db.Column(db.String(3))  # cpu阈值
    server_disk_th = db.Column(db.String(3))  # 磁盘阈值

    server_id = db.Column(db.Integer, db.ForeignKey('server_info.id'))

    # create_time
    # update_time

    def __init__(self, server_id=None, server_ram_th=None, server_cpu_th=None,
                 server_disk_th=None):
        self.server_id = server_id
        self.server_ram_th = server_ram_th
        self.server_cpu_th = server_cpu_th
        self.server_disk_th = server_disk_th

    def to_dict(self):
        threshold_dict = {
            "id": self.id,
            "server_id": self.server_id,
            "server_ram_th": self.server_ram_th,
            "server_cpu_th": self.server_cpu_th,
            "server_disk_th": self.server_disk_th
        }
        return threshold_dict

    def __repr__(self):
        str_ = """
        ServerThreshold表
        包含字段：
        id
        server_id
        server_ram_th
        server_cpu_th
        server_disk_th
        create_time
        update_time
        """
        return str_
